# Rime schema settings
# encoding: utf-8

schema:
  schema_id: flutterpy
  name: 小蝶音形
  version: "1.0.0-dev"
  author:
    - 小鹤音形方案设计：何海峰 <flypy@qq.com>
    - 小蝶特性修改、魔改：金毛 <djy0212@foxmail.com>
  description: |
    小蝶音形输入法，小鹤音形的魔改版，兼容小鹤码表和用户码表，采用lua添加个人喜好的功能。
  dependencies:
    - flypy

# 对应小鹤版本 10.9.1
# SHA256 of flypy.scheme.yaml: A64A67E92167E8A7974FF0D15FB87FB158E911CBF9585B8917B4C28768ADC069

# 方案特性：
# - 本方案用户词库和小鹤flypy_user分离，便于维护和更新小鹤版本
# - 移除
#   - 提供可选开关移除小鹤的四字以上短语，默认开启（本方案用户词库中的词保持原样）
#   - 移除小鹤的o开头的符号、部首等编码（不影响o开头的正常字词）
#   - 移除小鹤自带的emoji表情
# - 快捷输入
#   - 快捷英文输入，按住单引号并同时按下你想输入的一个字符，可以直接输入该字符，放开后可继续正常输入其他内容
#   - 快捷中文输入，输入法处于英文模式时，按住单引号输入会临时进入中文模式(可切换，默认关闭)
#   - 临时英文输入模式，按单引号进入，输入结束后按空格或单引号上屏
# - 使用分号作为符号的前导符，直观输入符号（替代原有的';*'、'of**'、'ot**'等编码）
#   - 符号分为形符，名符，类符
#   - 形符有类和标签，类是符号开头的串（不包括分号），不限长度，标签是单个字母或数字，输完了标签就自动上屏（如';-n'代表en dash）
#   - 名符是特殊的类符，就是类名为空字符串的类符（如';;endash代表en dash'）
#   - 类符也有类和标签，类是字母或数字开头的串，可包含字母数字和符号，以分号表示结尾。标签不限长度，可包含任意字符。（如';braille;fd'代表一个盲文字符）
#   - （每一类用一个函数来处理，通过一个函数把类名对应到函数上
#   - （符号基本上是简单的内联输入，例如emoji, unicode码，而变换器专门用于复杂的转换，例如菊花文、数字转大写
#   - 名符和类符按第三个分号时，上屏
# - 使用反斜杠进入变换器，进行候选和上屏的变换（如菊花文）还有临时词语记忆
#   - '\name\'代表某个变换器开始，'\\'代表当前变换器结束
#   - 变换器的嵌套，候选会先被内部的变换器处理，再被外部处理：上屏同理
#   - ';\a'到';\z'是记忆的内容，'\a\'到'\z\'变换器上屏时记忆其处理的上屏内容
# - 使用等号进入计算器模式，用luaxp库求值，避免执行任意lua代码，安全性更高（<https://github.com/toggledbits/luaxp>）

# TODO: 移除小鹤自带的emoji
# - 检测到一个段结束了，自动选定
# - 弄一个上屏的钩子，其实就是弄个检测特定键的processor（可以设置，一般是空格），然后按那个按键就经过转换器上屏
#

# 目录结构设计：
# - flutterpy/：存放本方案的自带文件
# - flutterpy_user/：存放本方案的用户配置文件
#   - scheme_patch.yaml: 配置文件的自定义补丁
#   - userdict.txt: 用户词库
#   - symbolset/：存放符号集
#   - transformer/：存放变换器

# 符号集接口：一个lua文件，代表若干个符号集，其中返回一个name->{func = ..., desc = ...}的table
# - desc是输入到';name'的时候显示的提示
# - function的参数：环境(env)、符号集名、标签字符串，返回的是二元组的列表，就是候选和描述的列表
# 变换器接口：一个lua文件，代表若干个变换器，返回一个name->{cand_func = ..., comm_func = ..., desc = ...}的table
# - cand_func是变换候选项的函数，传入参数为env、变换器名、原候选项列表，返回处理以后的候选项列表。
# - comm_func是变换上屏内容的函数，传入参数为env、变换器名、分段表，返回的是处理后的要上屏的文字。
# - 分段表：包括input、commit_text、segments
# - 每个段包括start, _start, _end、tags标签、selected选择的下标、candidates原候选词列表（如果有）
# - 每个候选词有type, start, _start, _end, quality, text, comment, preedit

switches:
  - name: ascii_mode
    states: [ 中, 英 ]
    reset: 1
  - name: full_shape
    states: [ 半, 全 ]
  - name: traditionize
    states: [ 简, 繁 ]
    reset: 0
  - name: ascii_punct
    states: [ 。, ． ]
    reset: 0
  - name: enable_tetrakill
    states: [ 田, 品 ]
    reset: 1
  - name: enable_zh_literal
    states: [ '''w', 我 ]
    reset: 0

engine:
  processors:
    - lua_processor@flutterpy_auto_commit_processor@flutterpy_auto_commit
    - lua_processor@flutterpy_literal_key_processor
    - ascii_composer
    - recognizer
    - key_binder
    - speller
    - punctuator
    - selector
    - navigator
    - fluid_editor # transformer功能需要
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - table_translator
    - table_translator@flypy_sys
    - table_translator@flypy_top
    - table_translator@flypy_user
    - table_translator@flypy_full
    - table_translator@flutterpy_user
    - reverse_lookup_translator
    - lua_translator@flutterpy_calculator_translator
    - lua_translator@flutterpy_symbol_translator@flutterpy_symbol
    - lua_translator@flutterpy_symbolset_translator@flutterpy_symbolset
    - lua_translator@flutterpy_literal_translator
    - lua_translator@flutterpy_transformer_translator
    
  filters:
    - lua_filter@flutterpy_killer_filter
    - lua_filter@flutterpy_transformer_filter
    - simplifier@traditionize

menu:
  page_size: 5 #候选项数
  
style:
  horizontal: true #竖排为false

key_binder:
  import_preset: default #方案切换相关
  bindings:
    - {accept: comma, send: comma, when: paging} #注销逗号翻页
    - {accept: period, send: period, when: paging} #注销句号翻页
    - {accept: semicolon, send: 2, when: has_menu} #分号次选
    - {accept: apostrophe, send: 3, when: has_menu}
    - {accept: "Tab", send: Escape, when: composing}
    - {accept: "Caps_Lock", send: Escape, when: composing} 
    - {accept: "Shift+space", toggle: full_shape, when: always} #切换全半角
    - {accept: "Control+period", toggle: ascii_punct, when: always} #切换中英标点

ascii_composer:
  good_old_caps_lock: true
  switch_key:
    Caps_Lock: Escape 
    Control_L: noop
    Control_R: noop
    Eisu_toggle: clear
    Shift_L: commit_code #有编码时上屏英文并转英文状态
    Shift_R: commit_code

speller:
  alphabet: 'abcdefghijklmnopqrstuvwxyz'
  max_code_length: 4
  auto_select: true   #全码唯一自动上屏，无则后码顶上屏
  auto_select_pattern: '^\w{4}$'
  #auto_clear: max_length #manual|auto|max_length 空码按下一键确认清屏|空码自动清|达到最长码时后码顶上清屏

punctuator:
  import_preset: flutterpy_data/flutterpy_punctuation

flutterpy_symbol:
  symbol_table:
    '-':
      n: {s: 'baqi', cap: 'ba'}
      m: {s: 'qiba', cap: 'qi'}
  single_pattern: '^;([!"#$%%&''()*+,%-./:<=>?@%[\%]^_`{|}~]+)([^!"#$%%&''()*+,%-./:;<=>?@%[\%]^_`{|}~]?)'
  multiple_pattern: '^;([!"#$%%&''()*+,%-./:<=>?@%[\%]^_`{|}~]+);([^!"#$%%&''()*+,%-./:;<=>?@%[\%]^_`{|}~]*)(;?)'

flutterpy_symbolset:
  symbolset_pattern: '^;([^!"#$%%&''()*+,%-./:;<=>?@%[\%]^_`{|}~][^;]*)(;?)([^;]*)(;?)'

recognizer:
  import_preset: default
  patterns:
    uppercase: ''
    reverse_lookup: '^[a-z`]*`[a-z`]*'
    flutterpy_calculation: '^=.*'
    flutterpy_literal: '^''[^'']*''?'
    flutterpy_trans_open: '^\\[^\\]+\\?'
    flutterpy_trans_close: '^\\\\?'
    flutterpy_symbol_single: '^;[!"#$%&''()*+,\-.\/:<=>?@\[\\\]^_`{|}~]+[^!"#$%&''()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]?'
    flutterpy_symbol_multiple: '^;[!"#$%&''()*+,\-.\/:<=>?@\[\\\]^_`{|}~]+;[^!"#$%&''()*+,\-.\/:;<=>?@\[\\\]^_`{|}~]*;?'
    flutterpy_symbol_prefix: '^;[!"#$%&''()*+,\-.\/:<=>?@\[\\\]^_`{|}~]+;?' # 开始输入符号的时候需要识别，不然会把分号当作2
    flutterpy_symbolset: '^;([^!"#$%&''()*+,\-.\/:;<=>?@\[\\\]^_`{|}~][^;]*)?;?[^;]*;?'
    flutterpy_symbol_prefix: '^;' # 开始输入符号的时候需要识别，不然输入后续内容时就会直接上屏分号

flutterpy_auto_commit:
  auto_select_rules:
    flutterpy_literal: {terminator: "'", separator: '', separator_n: 0}
    flutterpy_trans_open: {terminator: '\', separator: '', separator_n: 0}
    flutterpy_trans_close: {terminator: '\', separator: '', separator_n: 0}
    flutterpy_symbol_single: {terminator: '[^!"#$%%&''()*+,%-./:<=>?@%[\%]^_`{|}~]', separator: '', separator_n: 0}
    flutterpy_symbol_multiple: {terminator: ';', separator: ';', separator_n: 1}
    flutterpy_symbolset: {terminator: ';', separator: ';', separator_n: 1}

editor:
  bindings:
    space: confirm
    Return: commit_raw_input
    Control+Return: commit_script_text
    BackSpace: revert # 默认的back设置与自动选定冲突
   
traditionize:
  opencc_config: s2tw.json
  option_name: traditionize
  tips: all #简繁对照

translator:
  dictionary: flypy
  enable_charset_filter: false
  enable_sentence: false
  enable_completion: false # 编码提示开关
  enable_user_dict: false
  initial_quality: -20000

reverse_lookup:
  dictionary: flypydz
  comment_format:
    - xform/ / /

flypy_top:
  dictionary: ""
  user_dict: flypy_top
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -19999 #用户词和系统词重码 置顶
  
flypy_sys:
  dictionary: ""
  user_dict: flypy_sys
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -40001 #本表词和系统词重码居后

flypy_user:
  dictionary: ""
  user_dict: flypy_user
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -20001 #用户词和系统词重码居后
  
flypy_full:
  dictionary: ""
  user_dict: flypy_full
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -20001 #和系统词重码时居后

flutterpy_user:
  dictionary: ""
  user_dict: flutterpy_user
  db_class: stabledb
  enable_sentence: false
  enable_completion: false
  initial_quality: -1 #和系统词重码时居后

